package com.ani.ui;

import android.app.Fragment;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.PopupWindow;

import com.ani.R;
import com.ani.ui.view.SettingItemView;
import com.ani.utils.StaticANI;

public class SettingFragment extends Fragment {

	public static final int PAGE_SETTINGS_HOME = 0;
	public static final int PAGE_SETTINGS_FILTER = 1;
	private int page = PAGE_SETTINGS_HOME;

	private boolean isPoped = false;
	private PopupWindow popupWindow;

	private ViewGroup item_container;

	public SettingFragment() {
		// Empty constructor required for fragment subclasses
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.fragment_settings, container,
				false);
		getActivity().setTitle(R.string.settings_title);
		item_container = (ViewGroup) rootView
				.findViewById(R.id.settings_container);
		return rootView;
	}

	@Override
	public void onResume() {
		super.onResume();
		refresh();
	}

	public void refresh() {
		item_container.removeAllViews();
		if (page == PAGE_SETTINGS_HOME)
			refreshMainPage();
		else
			refreshFilterPage();
	}

	public void refreshMainPage() {
		SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(getActivity());
		addSettingItemView(SettingItemView.TYPE_CATEG_SWITCH, "LOGS", null, pref.getBoolean(StaticANI.SERVICE_LOGS_ACTIVATE, true))
				.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						((SettingItemView) v).setSwitch(!((SettingItemView) v)
								.getSwitchi());
						SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(getActivity());
						Editor editor = pref.edit();
						editor.putBoolean(StaticANI.SERVICE_LOGS_ACTIVATE, ((SettingItemView) v).getSwitchi());
						editor.commit();
						// TODO Activate/Unactivate logger
					}
				});
		addSettingItemView(SettingItemView.TYPE_NORMAL, "Filters")
				.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						setPage(PAGE_SETTINGS_FILTER);
					}
				});
		addSettingItemView(SettingItemView.TYPE_NORMAL, "Delete logs data")
				.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						getActivity();
						LayoutInflater layoutInflater = (LayoutInflater) getActivity()
								.getBaseContext().getSystemService(
										Context.LAYOUT_INFLATER_SERVICE);
						final View popupView = layoutInflater.inflate(
								R.layout.setting_erase_logs_popup, null);
						popupWindow = new PopupWindow(popupView,
								LayoutParams.WRAP_CONTENT,
								LayoutParams.WRAP_CONTENT);
						Button addApplySetting = (Button) popupView
								.findViewById(R.id.popup_setting_ok_button);
						Button exitPopup = (Button) popupView
								.findViewById(R.id.popup_setting_cancel_button);

						addApplySetting
								.setOnClickListener(new OnClickListener() {
									@Override
									public void onClick(View v) {
										// TODO Remove all logs
										dismissPopup();
									}
								});

						exitPopup.setOnClickListener(new OnClickListener() {
							@Override
							public void onClick(View v) {
								dismissPopup();
							}
						});

						isPoped = true;
						item_container.setEnabled(false);
						item_container.setBackgroundColor(getActivity()
								.getResources().getColor(R.color.transparent));
						// popupWindow.setBackgroundDrawable(new
						// ColorDrawable(Color.WHITE));
						popupWindow.setFocusable(true);
						popupWindow.showAtLocation(popupView, Gravity.CENTER,
								0, 0);
					}
				});
		;
		addSettingItemView(SettingItemView.TYPE_CATEG, "NOTIFICATIONS");
		addSettingItemView(SettingItemView.TYPE_NORMAL_SWITCH,
				"Data traffic notification", null, pref.getBoolean(StaticANI.NOTIFICATION_TRAFFIC_ACTIVATE, true)).setOnClickListener(
				new OnClickListener() {

					@Override
					public void onClick(View v) {
						((SettingItemView) v).setSwitch(!((SettingItemView) v)
								.getSwitchi());
						// TODO Activate/Unactivate traffic notification
						SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(getActivity());
						Editor editor = pref.edit();
						editor.putBoolean(StaticANI.NOTIFICATION_TRAFFIC_ACTIVATE, ((SettingItemView) v).getSwitchi());
						editor.commit();
					}
				});
		addSettingItemView(SettingItemView.TYPE_NORMAL_SWITCH,
				"Blacklist notification", null, pref.getBoolean(StaticANI.NOTIFICATION_BLACKLIST_ACTIVATE, true)).setOnClickListener(
				new OnClickListener() {

					@Override
					public void onClick(View v) {
						((SettingItemView) v).setSwitch(!((SettingItemView) v)
								.getSwitchi());
						// TODO Activate/Unactivate blacklist notification
						SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(getActivity());
						Editor editor = pref.edit();
						editor.putBoolean(StaticANI.NOTIFICATION_BLACKLIST_ACTIVATE, ((SettingItemView) v).getSwitchi());
						editor.commit();
					}
				});
	}

	public void refreshFilterPage() {
	}

	public SettingItemView addSettingItemView(int type, String name,
			Drawable icon, boolean b) {
		SettingItemView v = new SettingItemView(getActivity());
		item_container.addView(v);
		v.setItemView(type, name, icon);
		v.setSwitch(b);
		return v;
	}
	
	public SettingItemView addSettingItemView(int type, String name,
			Drawable icon) {
		SettingItemView v = new SettingItemView(getActivity());
		item_container.addView(v);
		v.setItemView(type, name, icon);
		return v;
	}
	
	public SettingItemView addSettingItemView(int type, String name) {
		return addSettingItemView(type, name, null);
	}

	public boolean isPoped() {
		return isPoped;
	}

	public void dismissPopup() {
		popupWindow.dismiss();
		isPoped = false;
		item_container.setEnabled(true);
		item_container.setBackgroundColor(Color.TRANSPARENT);
	}

	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
		refresh();
	}

}